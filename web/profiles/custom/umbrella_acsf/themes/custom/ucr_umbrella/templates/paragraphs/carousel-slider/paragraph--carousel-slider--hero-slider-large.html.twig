{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'hero-slider hs-large'
]
%}
{% block paragraph %}

    <div{{ attributes.addClass(classes) }}>
        {% block content %}
            {% if is_video_slide %}
                {{ content.field_media }}
            {% else %}
                {% set hero_display = content.field_slider_orientation|render|striptags|trim %}
                {% set hero_title = content.field_title|render|striptags|trim %}
                
                {% set hero_subtext = content.field_subtitle|render|striptags|trim %}

                {% set hero_button = content.field_slider_button_text|render|striptags|trim %}
                {% set hero_url = content.field_link|render|striptags|trim %}

                {% set replace_value_var= 'Background colour' %}
                {% set replace_with_value_var = '' %} 
                {% set background_color = content.field_background_colour|render|striptags|trim|replace({ (replace_value_var): replace_with_value_var}) %}
                {% set div_class= "" %}
                {% set background_style = "" %}
                {% if background_color is not empty %}

                    {% set start_replace_value_var = ")" %}
                    {% set start_replace_with_value_var = ",0)" %}
                    {% set startbackground_color = background_color|replace({ (start_replace_value_var): start_replace_with_value_var}) %}

                    {% set end_replace_value_var = ")" %}
                    {% set end_replace_with_value_var = ",0.6)" %}
                    {% set endbackground_color = background_color|replace({ (end_replace_value_var): end_replace_with_value_var}) %}

                    {% set background_style = background_style ~ "background: linear-gradient(to bottom " ~ hero_display ~ "," ~ startbackground_color ~ "48%," ~ endbackground_color ~ "85%);" %}
                    {% set div_class="herocarousel_bg_overlay" %}
                {% endif %}
                {{ content.field_image }}
                {% if hero_title is not empty or hero_subtext is not empty or hero_button is not empty %}
                    <div class="slider-text-bg-container hs-{{ hero_display }}" style="{{ background_style }}">
                        <div class="slider-text-container" >
                            <div class="slider-text-area">
                                {% if hero_title is not empty %}
                                    <div class="slider-title">{{ hero_title|length > 80 ? hero_title|slice(0, 80) ~ '...' : hero_title  }}</div>
                                {% endif %}
                                {% if hero_subtext is not empty %}
                                    <div class="slider-subtitle">{{ hero_subtext|length > 170 ? hero_subtext|slice(0, 110) ~ '...' : hero_subtext  }}</div>
                                {% endif %}
                                {% if hero_button is not empty %}
                                    <div class="slider-button-area">
                                        {% if hero_url %}<a href="{{ hero_url }}" class="slider_button">{{ hero_button }}</a>
                                        {% else %}<div class="slider_button">{{ hero_button }}</div>
                                        {% endif %}
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endif %}
            {% endif %}
        {% endblock %}
    </div>
{% endblock paragraph %}
