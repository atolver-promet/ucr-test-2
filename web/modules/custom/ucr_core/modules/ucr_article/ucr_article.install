<?php

/**
 * @file
 * Contains installation and update routines for the Article Content Type.
 */

use Drupal\Core\Utility\UpdateException;
use Drupal\Component\Serialization\Yaml;
use Drupal\Core\Config\FileStorage;
use Drupal\taxonomy\Entity\Term;
//use Drupal\taxonomy\TermInterface;
use Drupal\ucr_core\UCRCustoms;
use Drupal\ucr_article\ArticleViews;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function ucr_article_install() {
    if (\Drupal::isConfigSyncing()) {
    return;
    }
    $config = \Drupal::configFactory();

    // Import YML and override the article View page with the new view page for article category listing
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/optional/tvi.taxonomy_vocabulary.article_categories.yml';
    $file_contents = file_get_contents($file_path);
    $content_yml = Yaml::decode($file_contents);
    $get_content_view = $config->getEditable('tvi.taxonomy_vocabulary.article_categories');
    $get_content_view->setData($content_yml)->save(TRUE);
}

function ucr_article_update_8001() {
  // Removed to clean up code. Check the Git History for code if needed.
}

/**
 *  Update views block to use the 'some' pager. Remove the unnecessary entity_view_displays & view modes, and update the view mode options.
 */
function ucr_article_update_8002() {
  // Removed to clean up code. Check the Git History for code if needed.
}

/**
 * Update the Articles with the new content keywords taxonomy.
 */
function ucr_article_update_8003() {
  $config = \Drupal::configFactory();
  $uuid_service = \Drupal::service('uuid');

  $page_contents = \Drupal\field\Entity\FieldConfig::loadByName('node', 'article', 'field_content_keywords');
  if(!$page_contents) {
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/field.field.node.article.field_content_keywords.yml';
    $file_contents = file_get_contents($file_path);
    $new_field = Yaml::decode($file_contents);

    $uuid = $uuid_service->generate();
    $full_array = array_merge(array('uuid' => $uuid), $new_field);
    \Drupal\field\Entity\FieldConfig::create($full_array)->save();
  }

  $meta_field = \Drupal\field\Entity\FieldConfig::loadByName('node', 'article', 'field_meta_tags');
  if(!$meta_field) {
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/field.field.node.article.field_meta_tags.yml';
    $file_contents = file_get_contents($file_path);
    $new_field = Yaml::decode($file_contents);

    $uuid = $uuid_service->generate();
    $full_array = array_merge(array('uuid' => $uuid), $new_field);
    \Drupal\field\Entity\FieldConfig::create($full_array)->save();
  }

  // *** Update the Form Display.
  $profile_name = $config->getEditable('core.extension')->get('profile');

  if(in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/umbrella/core.entity_form_display.node.article.default.yml';
  } else {
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_form_display.node.article.default.yml';
  }
  $file_contents = file_get_contents($file_path);
  $new_form = Yaml::decode($file_contents);
  $current_form = $config->getEditable('core.entity_form_display.node.article.default');
  $current_form_id = $current_form->get('uuid');
  if(!$current_form_id) { // Custom Form does not exist. So create a new one.
    $uuid = $uuid_service->generate();
    $full_array = array_merge(array('uuid' => $uuid), $new_form);
    $current_form->setData($full_array)->save(TRUE);
  } else { // A custom one exists, so update the parts needed.
    $current_form->set('dependencies', $new_form['dependencies'])
      ->set('third_party_settings', $new_form['third_party_settings'])
      ->set('content', $new_form['content'])
      ->set('hidden', $new_form['hidden'])->save(TRUE);
  }
}
/**
 * August 2018: Update the Articles to use tags and type taxonomy filters. Additional Articles Views updates as well for the default profile only.
 */
function ucr_article_update_8004() {
    $config = \Drupal::configFactory();
    $moduleHandler = \Drupal::service('module_handler');
    $uuid_service = \Drupal::service('uuid');

    //enable tvi module
    if (!$moduleHandler->moduleExists('tvi')) {
    \Drupal::service('module_installer')->install(['tvi']);
    }

    //enable taxonomy term with depth module
    if (!$moduleHandler->moduleExists('views_taxonomy_term_name_depth')) {
    \Drupal::service('module_installer')->install(['views_taxonomy_term_name_depth']);
    }

    // Add on the new date-formats.
    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.date_format.ucr_article_day_month_format.yml';
    $file_contents = file_get_contents($file_path);
    $content_yml = Yaml::decode($file_contents);
    $new_config = $config->getEditable('core.date_format.ucr_article_day_month_format');
    $uuid = $uuid_service->generate();
    $full_array = array_merge(array('uuid' => $uuid), $content_yml);
    $new_config->setData($full_array)->save(TRUE);

    $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.date_format.ucr_article_standard_format.yml';
    $file_contents = file_get_contents($file_path);
    $content_yml = Yaml::decode($file_contents);
    $new_config = $config->getEditable('core.date_format.ucr_article_standard_format');
    $uuid = $uuid_service->generate();
    $full_array = array_merge(array('uuid' => $uuid), $content_yml);
    $new_config->setData($full_array)->save(TRUE);

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(in_array(strtolower($profile_name), array('ucr_profile', 'ucr_profile_local'))) {
        // Update Article View (adds two new view page w/filters for tags and article_categories as well as additional view cleanup)
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.articles.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('views.view.articles');
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('display', $content_yml['display'])->save(TRUE);

        // Update the Taxonomy Term - Article Categories Form Display.
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_form_display.taxonomy_term.article_categories.default.yml';
        $file_contents = file_get_contents($file_path);
        $new_form = Yaml::decode($file_contents);

        $current_form = $config->getEditable('core.entity_form_display.taxonomy_term.article_categories.default');
        $current_form_id = $current_form->get('uuid');
        if(!$current_form_id) { // Custom Form does not exist. So create a new one.
            $uuid = $uuid_service->generate();
            $full_array = array_merge(array('uuid' => $uuid), $new_form);
            $current_form->setData($full_array)->save(TRUE);
        } else { // A custom one exists, so update the parts needed.
            $current_form->set('dependencies', $new_form['dependencies'])
                ->set('content', $new_form['content'])
                ->set('hidden', $new_form['hidden'])->save(TRUE);
        }

        // Update the Taxonomy Term - Article Categories View Display.
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_view_display.taxonomy_term.article_categories.default.yml';
        $file_contents = file_get_contents($file_path);
        $new_form = Yaml::decode($file_contents);

        $current_form = $config->getEditable('core.entity_view_display.taxonomy_term.article_categories.default');
        $current_form_id = $current_form->get('uuid');
        if(!$current_form_id) { // Custom Form does not exist. So create a new one.
            $uuid = $uuid_service->generate();
            $full_array = array_merge(array('uuid' => $uuid), $new_form);
            $current_form->setData($full_array)->save(TRUE);
        } else { // A custom one exists, so update the parts needed.
            $current_form->set('dependencies', $new_form['dependencies'])
                ->set('third_party_settings', $new_form['third_party_settings'])
                ->set('content', $new_form['content'])
                ->set('hidden', $new_form['hidden'])->save(TRUE);
        }

        // Import YML and override the article View page with the new view page for article category listing
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/optional/tvi.taxonomy_vocabulary.article_categories.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('tvi.taxonomy_vocabulary.article_categories');
        $get_content_view->setData($content_yml)->save(TRUE);
    }
}
/**
 * September 2018 - Update the Article View to include the Related Article Blocks. Add the new Article Taxonomy View.
 */
function ucr_article_update_8005() {
    $config = \Drupal::configFactory();
    $uuid_service = \Drupal::service('uuid');

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(in_array(strtolower($profile_name), array('ucr_profile', 'ucr_profile_local'))) {
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.articles.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('views.view.articles');
        $get_content_view->set('description', $content_yml['description'])->save(TRUE);
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('display', $content_yml['display'])->save(TRUE);

        // Add the new Article Taxonomy Display View.
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.article_taxonomies.yml';
        $file_contents = file_get_contents($file_path);
        $new_view = Yaml::decode($file_contents);

        $current_view = $config->getEditable('views.view.article_taxonomies');
        $uuid = $uuid_service->generate();
        $full_array = array_merge(array('uuid' => $uuid), $new_view);
        $current_view->setData($full_array)->save(TRUE);
    }
}

/**
 * October 2018 - Update the Article View with updated fields in the displays.
 */
function ucr_article_update_8006() {
    $config = \Drupal::configFactory();
    $uuid_service = \Drupal::service('uuid');

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(in_array(strtolower($profile_name), array('ucr_profile', 'ucr_profile_local'))) {
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.articles.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('views.view.articles');
        $get_content_view->set('description', $content_yml['description'])->save(TRUE);
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('display', $content_yml['display'])->save(TRUE);

        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.article_taxonomies.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('views.view.article_taxonomies');
        $get_content_view->set('description', $content_yml['description'])->save(TRUE);
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('display', $content_yml['display'])->save(TRUE);

        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_view_display.node.article.default.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('core.entity_view_display.node.article.default');
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('third_party_settings', $content_yml['third_party_settings'])->save(TRUE);
        $get_content_view->set('content', $content_yml['content'])->save(TRUE);
        $get_content_view->set('hidden', $content_yml['hidden'])->save(TRUE);
    }
}


/**
 * November 2018 - Update the Article View with the RSS Feeds. Add Social Media Options.
 */
function ucr_article_update_8007() {
    $config = \Drupal::configFactory();
    $uuid_service = \Drupal::service('uuid');

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/views.view.articles.yml';
        $file_contents = file_get_contents($file_path);
        $content_yml = Yaml::decode($file_contents);
        $get_content_view = $config->getEditable('views.view.articles');
        $get_content_view->set('description', $content_yml['description'])->save(TRUE);
        $get_content_view->set('dependencies', $content_yml['dependencies'])->save(TRUE);
        $get_content_view->set('display', $content_yml['display'])->save(TRUE);

        $social_image_field = \Drupal\field\Entity\FieldConfig::loadByName('node', 'article', 'field_social_media_image');
        if(!$social_image_field) {
            $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/field.field.node.article.field_social_media_image.yml';
            $file_contents = file_get_contents($file_path);
            $field_yaml_content = Yaml::decode($file_contents);

            $uuid = $uuid_service->generate();
            $full_array = array_merge(array('uuid' => $uuid), $field_yaml_content);
            \Drupal\field\Entity\FieldConfig::create($full_array)->save();
        }

        // Update the Form View
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_form_display.node.article.default.yml';
        $file_contents = file_get_contents($file_path);
        $page_form_yml = Yaml::decode($file_contents);

        $get_page_form = $config->getEditable('core.entity_form_display.node.article.default');
        $current_view_id = $get_page_form->get('uuid');
        if(!$current_view_id) { // Custom Form does not exist. So create a new one.
            $uuid = $uuid_service->generate();
            $full_array = array_merge(array('uuid' => $uuid), $page_form_yml);
            $get_page_form->setData($full_array)->save(TRUE);
        } else { // A custom one exists, so update the parts needed.
            $get_page_form->set('dependencies', $page_form_yml['dependencies'])->save(TRUE);
            $get_page_form->set('third_party_settings', $page_form_yml['third_party_settings'])->save(TRUE);
            $get_page_form->set('content', $page_form_yml['content'])->save(TRUE);
            $get_page_form->set('hidden', $page_form_yml['hidden'])->save(TRUE);
        }

        // Update the Display View
        $file_path = DRUPAL_ROOT . '/modules/custom/ucr_core/modules/ucr_article/config/install/core.entity_view_display.node.article.default.yml';
        $file_contents = file_get_contents($file_path);
        $page_form_yml = Yaml::decode($file_contents);

        $get_page_form = $config->getEditable('core.entity_view_display.node.article.default');
        $current_view_id = $get_page_form->get('uuid');
        if(!$current_view_id) { // Custom Form does not exist. So create a new one.
            $uuid = $uuid_service->generate();
            $full_array = array_merge(array('uuid' => $uuid), $page_form_yml);
            $get_page_form->setData($full_array)->save(TRUE);
        } else { // A custom one exists, so update the parts needed.
            $get_page_form->set('dependencies', $page_form_yml['dependencies'])->save(TRUE);
            $get_page_form->set('content', $page_form_yml['content'])->save(TRUE);
            $get_page_form->set('hidden', $page_form_yml['hidden'])->save(TRUE);
        }
    }
}

/**
 * July 2019 - Update the whole Module.
 */
function ucr_article_update_8008() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        // Create the new storage spaces.
        $config_files = [
            'block_content.type.articles_block',
            'taxonomy.vocabulary.article_types',
            'image.style.article_header_l',
            'image.style.article_header_m',
            'image.style.article_header_s',
            'image.style.article_listing_m_up',
            'image.style.article_listing_s',
            'image.style.article_preview_box_images_l',
            'image.style.article_preview_box_images_m',
            'image.style.article_preview_box_images_s',
            'image.style.article_preview_slideshow_l',
            'image.style.article_preview_slideshow_m',
            'image.style.article_preview_slideshow_s',
            'image.style.article_preview_slideshow_xl',
            'image.style.article_preview_standard_alt_l',
            'image.style.article_preview_standard_alt_s',
            'image.style.article_preview_standard_l',
            'image.style.article_preview_standard_s',
            'image.style.article_thumbnail',
            'core.date_format.ucr_article_day_month_format',
            'core.date_format.ucr_article_standard_format',
            'core.entity_view_mode.media.article_header_image',
            'core.entity_view_mode.media.article_page_list_image',
            'core.entity_view_mode.media.article_preview_box_images',
            'core.entity_view_mode.media.article_preview_slideshow',
            'core.entity_view_mode.media.article_preview_standard',
            'core.entity_view_mode.media.article_preview_standard_alt',
            'core.entity_view_mode.node.article_preview_box_images',
            'core.entity_view_mode.node.article_preview_minimalist',
            'core.entity_view_mode.node.article_preview_slideshow',
            'core.entity_view_mode.node.article_preview_standard',
            'core.entity_view_mode.node.article_preview_standard_alt',
            'core.entity_view_mode.taxonomy_term.article_type_read_more',
            'core.entity_view_mode.taxonomy_term.article_type_url',
            'core.base_field_override.node.article.promote',
            'core.base_field_override.node.article.status',
            'field.storage.block_content.field_article_display',
            'field.storage.block_content.field_article_limit',
            'field.storage.block_content.field_article_list',
            'field.storage.block_content.field_article_more_link',
            'field.storage.block_content.field_article_more_link_align',
            'field.storage.block_content.field_article_row',
            'field.storage.block_content.field_article_type',
            'field.field.block_content.articles_block.body',
            'field.field.block_content.articles_block.field_article_display',
            'field.field.block_content.articles_block.field_article_limit',
            'field.field.block_content.articles_block.field_article_list',
            'field.field.block_content.articles_block.field_article_more_link',
            'field.field.block_content.articles_block.field_article_more_link_align',
            'field.field.block_content.articles_block.field_article_row',
            'field.field.block_content.articles_block.field_article_type',
            'field.field.block_content.articles_block.field_block_margin_bottom',
            'field.field.block_content.articles_block.field_block_margin_left',
            'field.field.block_content.articles_block.field_block_margin_right',
            'field.field.block_content.articles_block.field_block_margin_top',
            'field.field.block_content.articles_block.field_block_padding_bottom',
            'field.field.block_content.articles_block.field_block_padding_left',
            'field.field.block_content.articles_block.field_block_padding_right',
            'field.field.block_content.articles_block.field_block_padding_top',
            'field.storage.node.field_article_alt_url',
            'field.storage.node.field_article_featured',
            'field.storage.node.field_article_header_image',
            'field.storage.node.field_article_header_video',
            'field.storage.node.field_article_hide_on_latest',
            'field.storage.node.field_article_special_image',
            'field.storage.node.field_article_spotlight',
            'field.storage.node.field_article_subtitle',
            'field.storage.node.field_article_types',
            'field.field.node.article.field_article_alt_url',
            'field.field.node.article.field_article_author',
            'field.field.node.article.field_article_date',
            'field.field.node.article.field_article_featured',
            'field.field.node.article.field_article_header_image',
            'field.field.node.article.field_article_header_video',
            'field.field.node.article.field_article_hide_on_latest',
            'field.field.node.article.field_article_image',
            'field.field.node.article.field_article_image_caption',
            'field.field.node.article.field_article_location',
            'field.field.node.article.field_article_special_image',
            'field.field.node.article.field_article_spotlight',
            'field.field.node.article.field_article_subtitle',
            'field.field.node.article.field_article_type_list',
            'field.field.node.article.field_article_types',
            'field.field.node.article.field_category',
            'field.field.node.article.field_content_keywords',
            'field.field.node.article.field_image_credit',
            'field.field.node.article.field_meta_tags',
            'field.field.node.article.field_social_media_image',
            'field.field.node.article.field_tags',
            'field.storage.taxonomy_term.field_at_base_path',
            'field.field.taxonomy_term.article_types.field_at_base_path',
            'pathauto.pattern.article_category',
            'pathauto.pattern.article_types',
            'pathauto.pattern.articles_pattern',
            'responsive_image.styles.article_header',
            'responsive_image.styles.article_listing',
            'responsive_image.styles.article_preview_box_images',
            'responsive_image.styles.article_preview_slideshow',
            'responsive_image.styles.article_preview_standard',
            'responsive_image.styles.article_preview_standard_alt',
            'core.entity_form_display.block_content.articles_block.default',
            'core.entity_form_display.node.article.default',
            'core.entity_form_display.taxonomy_term.article_types.default',
            'core.entity_view_display.block_content.articles_block.center',
            'core.entity_view_display.block_content.articles_block.default',
            'core.entity_view_display.media.image.article_header_image',
            'core.entity_view_display.media.image.article_page_list_image',
            'core.entity_view_display.media.image.article_preview_box_images',
            'core.entity_view_display.media.image.article_preview_slideshow',
            'core.entity_view_display.media.image.article_preview_standard',
            'core.entity_view_display.media.image.article_preview_standard_alt',
            'core.entity_view_display.node.article.article_preview_box_images',
            'core.entity_view_display.node.article.article_preview_minimalist',
            'core.entity_view_display.node.article.article_preview_slideshow',
            'core.entity_view_display.node.article.article_preview_standard',
            'core.entity_view_display.node.article.article_preview_standard_alt',
            'core.entity_view_display.node.article.default',
            'core.entity_view_display.node.article.teaser',
            'core.entity_view_display.taxonomy_term.article_types.article_type_read_more',
            'core.entity_view_display.taxonomy_term.article_types.article_type_url',
            'core.entity_view_display.taxonomy_term.article_types.default',
            'views.view.article_content',
            'views.view.article_content_blocks',
            'views.view.article_content_moderated',
            'views.view.articles',
            'views.view.article_taxonomies',
            'tvi.taxonomy_vocabulary.article_categories',
        ];

        $completed = UCRCustoms::updateConfigFromStorage('ucr_article', $config_files, 'module', ['install', 'optional', 'retired']);
        if(!$completed) {
            throw new UpdateException('Update has Failed.');
        } else {
            $types = 'article_types';
            $type_values = ['blog' => "Blog Posts", 'news' => "News", 'press' => "Press Releases"];
            $associated_types = array();
            foreach ($type_values as $base_path => $type_name) {
                $term = Term::create(array(
                    'parent' => array(),
                    'name' => $type_name,
                    'vid' => $types,
                    'field_at_base_path' => $base_path,
                ));
                $term->save(TRUE);
                if($term) {
                    $associated_types[$base_path] = $term->id();
                }
            }

            if(count($associated_types) > 0) {
                $query = \Drupal::entityQuery('node')
                    ->condition('type', 'article');
                $nids = $query->execute();
                if($nids) {
                    foreach($nids as $nid) {
                        $node = \Drupal\node\Entity\Node::load($nid);
                        $current_type = $node->field_article_type_list->value;
                        $node->set('field_article_types', $associated_types[$current_type]);
                        $node->set('field_article_hide_on_latest', FALSE);
                        $node->set('field_article_featured', FALSE);
                        $node->set('field_article_spotlight', FALSE);
                        $node->save(TRUE);
                    }
                }
            }
        }
    }
}

/**
 * July 2019 - Update Permissions for Article Module.
 */
function ucr_article_update_8009() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if(!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        $roles = Role::loadMultiple();
        $permissions = [
            'contributors' => [
            ],
            'editors' => [
                'administer article_types vocabulary terms',
                'create articles_block block content',
                'create terms in article_types',
                'delete any articles_block block content',
                'edit terms in article_types',
                'update any articles_block block content',
            ],
            'site_builders' => [
                'administer article_types vocabulary terms',
                'create articles_block block content',
                'create terms in article_types',
                'delete any articles_block block content',
                'delete terms in article_types',
                'edit terms in article_types',
                'update any articles_block block content',
            ],
        ];

        foreach ($roles as $role) {
            $role_id = $role->id();
            if (array_key_exists($role_id, $permissions)) {
                if (count($permissions[$role_id]) > 0) {
                    foreach ($permissions[$role_id] as $perm) {
                        $role->grantPermission($perm)->save(TRUE);
                    }
                }
            }
        }
    }
}

/**
* October 2019 - Add new Article Custom Block Type - Topics List
*/
function ucr_article_update_8010() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if (!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        // Create the new storage spaces.
        $config_files = [
            'block_content.type.topics_list',
            'field.storage.block_content.field_list_by',
            'field.storage.block_content.field_show_count',
            'field.field.block_content.topics_list.body',
            'field.field.block_content.topics_list.field_list_by',
            'field.field.block_content.topics_list.field_show_count',
            'field.field.block_content.topics_list.field_block_margin_bottom',
            'field.field.block_content.topics_list.field_block_margin_left',
            'field.field.block_content.topics_list.field_block_margin_right',
            'field.field.block_content.topics_list.field_block_margin_top',
            'field.field.block_content.topics_list.field_block_padding_bottom',
            'field.field.block_content.topics_list.field_block_padding_left',
            'field.field.block_content.topics_list.field_block_padding_right',
            'field.field.block_content.topics_list.field_block_padding_top',
            'core.entity_form_display.block_content.topics_list.default',
            'core.entity_view_display.block_content.topics_list.default',
            'core.entity_view_display.block_content.topics_list.center',
            'views.view.article_content_topics_list'
        ];

        $completed = UCRCustoms::updateConfigFromStorage('ucr_article', $config_files, 'module');
        if (!$completed) {
            throw new UpdateException('Update has Failed.');
        }
    }
}

/**
* May 2020 - Add new field to open Alternate URLs in new tab
*/
function ucr_article_update_8011() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if (!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        // Create the new storage spaces.
        $config_files = [
            'field.storage.node.field_open_article_in_new_tab',
            'field.field.node.article.field_open_article_in_new_tab',
            'core.entity_form_display.node.article.default',
            'core.entity_view_display.node.article.article_preview_box_images',
            'core.entity_view_display.node.article.article_preview_minimalist',
            'core.entity_view_display.node.article.article_preview_slideshow',
            'core.entity_view_display.node.article.article_preview_standard',
            'core.entity_view_display.node.article.article_preview_standard_alt',
            'core.entity_view_display.node.article.default'

        ];

        $completed = UCRCustoms::updateConfigFromStorage('ucr_article', $config_files, 'module');
        if (!$completed) {
            throw new UpdateException('Update has Failed.');
        }
    }
}

/**
* July 2020 - Open articles body summary
*/
function ucr_article_update_8012() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if (!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        // Create the new storage spaces.
        $config_files = [
            'core.entity_form_display.node.article.default',
        ];

        $completed = UCRCustoms::updateConfigFromStorage('ucr_article', $config_files, 'module');
        if (!$completed) {
            throw new UpdateException('Update has Failed.');
        }
    }
}

/**
* June 2021 - Reformat date to Month DD, YYYY for Article Preview standards
*/
function ucr_article_update_8013() {
    $config = \Drupal::configFactory();

    // Get the profile name and ONLY apply the following changes to the default profile.
    $profile_name = $config->getEditable('core.extension')->get('profile');

    if (!in_array(strtolower($profile_name), array('umbrella_acsf', 'umbrella_local'))) {
        // Create the new storage spaces.
        $config_files = [
            'core.entity_view_display.node.article.article_preview_standard',
        ];

        $completed = UCRCustoms::updateConfigFromStorage('ucr_article', $config_files, 'module');
        if (!$completed) {
            throw new UpdateException('Update has Failed.');
        }
    }
}

function ucr_article_update_dependencies() {
  $dependencies = array();
  $dependencies['ucr_article']['8008'] = [
    'ucr_core' => '8010'
  ];
  return $dependencies;
}
